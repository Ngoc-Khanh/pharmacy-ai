#!/usr/bin/env python3
"""
Script ki·ªÉm tra c·∫•u h√¨nh v√† k·∫øt n·ªëi tr∆∞·ªõc khi ch·∫°y sync
S·ª≠ d·ª•ng: python scripts/check_config.py
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent.parent))

import cohere
from beanie import init_beanie
from motor.motor_asyncio import AsyncIOMotorClient
from pymilvus import connections, utility

from config.config import Settings
from models.medicine import Medicine


class ConfigChecker:
    def __init__(self):
        self.settings = Settings()
        self.errors = []
        self.warnings = []
    def check_environment_variables(self):
        """Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt"""
        print("üîç Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng...")
        required_vars = {
            "DATABASE_URL": self.settings.DATABASE_URL,
            "DATABASE_NAME": self.settings.DATABASE_NAME,
            "COHERE_API_KEY": self.settings.COHERE_API_KEY,
            "MILVUS_URI": self.settings.MILVUS_URI,
            "MILVUS_TOKEN": self.settings.MILVUS_TOKEN,
        }
        for var_name, var_value in required_vars.items():
            if not var_value:
                self.errors.append(f"‚ùå {var_name} kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
            else:
                print(
                    f"‚úÖ {var_name}: {'*' * (len(str(var_value)) - 4) + str(var_value)[-4:]}"
                )
        # Optional vars
        optional_vars = {
            "COHERE_EMBEDDING_MODEL": self.settings.COHERE_EMBEDDING_MODEL,
            "MILVUS_COLLECTION_NAME": self.settings.MILVUS_COLLECTION_NAME,
            "EMBEDDING_DIMENSION": self.settings.EMBEDDING_DIMENSION,
        }
        for var_name, var_value in optional_vars.items():
            if var_value:
                print(f"‚úÖ {var_name}: {var_value}")
            else:
                self.warnings.append(f"‚ö†Ô∏è  {var_name} s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")

    async def check_mongodb_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi MongoDB"""
        print("\nüîç Ki·ªÉm tra k·∫øt n·ªëi MongoDB...")
        try:
            client = AsyncIOMotorClient(self.settings.DATABASE_URL)
            database = client[self.settings.DATABASE_NAME]
            # Test connection
            await client.admin.command("ping")
            print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng")
            # Initialize beanie
            await init_beanie(database=database, document_models=[Medicine])
            print("‚úÖ Kh·ªüi t·∫°o Beanie th√†nh c√¥ng")
            # Check medicines collection
            medicine_count = await Medicine.count()
            print(f"‚úÖ T√¨m th·∫•y {medicine_count} medicines trong database")
            if medicine_count == 0:
                self.warnings.append("‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu medicine trong database")
            # Test sample medicine
            if medicine_count > 0:
                sample_medicine = await Medicine.find_one()
                if sample_medicine:
                    print(f"‚úÖ Sample medicine: {sample_medicine.name}")
                    # Check required fields
                    required_fields = [
                        "name",
                        "description",
                        "details",
                        "usageguide",
                        "variants",
                    ]
                    missing_fields = []
                    for field in required_fields:
                        if not hasattr(sample_medicine, field) or not getattr(
                            sample_medicine, field
                        ):
                            missing_fields.append(field)
                    if missing_fields:
                        self.warnings.append(
                            f"‚ö†Ô∏è  Sample medicine thi·∫øu fields: {', '.join(missing_fields)}"
                        )
                    else:
                        print("‚úÖ C·∫•u tr√∫c d·ªØ li·ªáu medicine h·ª£p l·ªá")
        except Exception as e:
            self.errors.append(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")

    def check_cohere_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi Cohere API"""
        print("\nüîç Ki·ªÉm tra k·∫øt n·ªëi Cohere API...")
        try:
            client = cohere.ClientV2(self.settings.COHERE_API_KEY)
            # Test embedding
            test_text = "Thu·ªëc gi·∫£m ƒëau paracetamol"
            response = client.embed(
                texts=[test_text],
                model=self.settings.COHERE_EMBEDDING_MODEL,
                input_type="search_document",
                embedding_types=["float"],
            )
            embedding = response.embeddings.float[0]
            print(f"‚úÖ K·∫øt n·ªëi Cohere API th√†nh c√¥ng")
            print(f"‚úÖ Model: {self.settings.COHERE_EMBEDDING_MODEL}")
            print(f"‚úÖ Embedding dimension: {len(embedding)}")
            if len(embedding) != self.settings.EMBEDDING_DIMENSION:
                self.warnings.append(
                    f"‚ö†Ô∏è  Embedding dimension kh√¥ng kh·ªõp: "
                    f"expected {self.settings.EMBEDDING_DIMENSION}, got {len(embedding)}"
                )
        except Exception as e:
            self.errors.append(f"‚ùå L·ªói k·∫øt n·ªëi Cohere API: {e}")

    def check_milvus_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi Milvus"""
        print("\nüîç Ki·ªÉm tra k·∫øt n·ªëi Milvus...")
        try:
            connections.connect(
                alias="default",
                uri=self.settings.MILVUS_URI,
                token=self.settings.MILVUS_TOKEN,
            )
            print("‚úÖ K·∫øt n·ªëi Milvus th√†nh c√¥ng")
            # Check if collection exists
            collection_name = self.settings.MILVUS_COLLECTION_NAME
            if utility.has_collection(collection_name):
                print(f"‚úÖ Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i")
                # Get collection info
                from pymilvus import Collection
                collection = Collection(collection_name)
                num_entities = collection.num_entities
                print(f"‚úÖ S·ªë l∆∞·ª£ng entities hi·ªán t·∫°i: {num_entities}")
                if num_entities > 0:
                    self.warnings.append(
                        f"‚ö†Ô∏è  Collection ƒë√£ c√≥ {num_entities} entities. "
                        f"S·ª≠ d·ª•ng --recreate-collection ƒë·ªÉ t·∫°o l·∫°i."
                    )
            else:
                print(
                    f"‚ÑπÔ∏è  Collection '{collection_name}' ch∆∞a t·ªìn t·∫°i (s·∫Ω ƒë∆∞·ª£c t·∫°o khi sync)"
                )
        except Exception as e:
            self.errors.append(f"‚ùå L·ªói k·∫øt n·ªëi Milvus: {e}")

    def print_summary(self):
        """In t·ªïng k·∫øt ki·ªÉm tra"""
        print("\n" + "=" * 50)
        print("üìã T·ªîNG K·∫æT KI·ªÇM TRA")
        print("=" * 50)
        if not self.errors and not self.warnings:
            print("üéâ T·∫•t c·∫£ c·∫•u h√¨nh ƒë·ªÅu OK! S·∫µn s√†ng ƒë·ªÉ sync.")
            return True
        if self.errors:
            print("\n‚ùå C√ÅC L·ªñI C·∫¶N S·ª¨A:")
            for error in self.errors:
                print(f"  {error}")
        if self.warnings:
            print("\n‚ö†Ô∏è  C√ÅC C·∫¢NH B√ÅO:")
            for warning in self.warnings:
                print(f"  {warning}")
        if self.errors:
            print("\n‚ùå Vui l√≤ng s·ª≠a c√°c l·ªói tr∆∞·ªõc khi ch·∫°y sync!")
            return False
        else:
            print("\n‚úÖ C√≥ th·ªÉ ch·∫°y sync (c√≥ m·ªôt s·ªë c·∫£nh b√°o)")
            return True

    async def run_all_checks(self):
        """Ch·∫°y t·∫•t c·∫£ c√°c ki·ªÉm tra"""
        print("üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA C·∫§U H√åNH")
        print("=" * 50)
        # Check environment variables
        self.check_environment_variables()
        # Check connections
        await self.check_mongodb_connection()
        self.check_cohere_connection()
        self.check_milvus_connection()
        # Print summary
        return self.print_summary()


async def main():
    """Main function"""
    try:
        checker = ConfigChecker()
        success = await checker.run_all_checks()
        if success:
            print("\nüöÄ ƒê·ªÉ ch·∫°y sync, s·ª≠ d·ª•ng:")
            print("   python scripts/run_sync.py")
            print("   python scripts/sync_medicines_to_milvus.py")
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
